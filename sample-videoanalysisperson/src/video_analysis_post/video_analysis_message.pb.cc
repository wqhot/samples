// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video_analysis_message.proto

#include "video_analysis_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_video_5fanalysis_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FrameIndex_video_5fanalysis_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_video_5fanalysis_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MapType_video_5fanalysis_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_video_5fanalysis_5fmessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Object_video_5fanalysis_5fmessage_2eproto;
namespace ascend {
namespace presenter {
namespace video_analysis {
class RegisterAppDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterApp> _instance;
} _RegisterApp_default_instance_;
class CommonResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonResponse> _instance;
} _CommonResponse_default_instance_;
class FrameIndexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameIndex> _instance;
} _FrameIndex_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Object> _instance;
} _Object_default_instance_;
class ImageSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageSet> _instance;
} _ImageSet_default_instance_;
class CarInferenceResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CarInferenceResult> _instance;
} _CarInferenceResult_default_instance_;
class MapTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapType> _instance;
} _MapType_default_instance_;
class HumanInferenceResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HumanInferenceResult> _instance;
} _HumanInferenceResult_default_instance_;
class FaceInferenceResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaceInferenceResult> _instance;
} _FaceInferenceResult_default_instance_;
}  // namespace video_analysis
}  // namespace presenter
}  // namespace ascend
static void InitDefaultsRegisterApp_video_5fanalysis_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ascend::presenter::video_analysis::_RegisterApp_default_instance_;
    new (ptr) ::ascend::presenter::video_analysis::RegisterApp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::video_analysis::RegisterApp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegisterApp_video_5fanalysis_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegisterApp_video_5fanalysis_5fmessage_2eproto}, {}};

static void InitDefaultsCommonResponse_video_5fanalysis_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ascend::presenter::video_analysis::_CommonResponse_default_instance_;
    new (ptr) ::ascend::presenter::video_analysis::CommonResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::video_analysis::CommonResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommonResponse_video_5fanalysis_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommonResponse_video_5fanalysis_5fmessage_2eproto}, {}};

static void InitDefaultsFrameIndex_video_5fanalysis_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ascend::presenter::video_analysis::_FrameIndex_default_instance_;
    new (ptr) ::ascend::presenter::video_analysis::FrameIndex();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::video_analysis::FrameIndex::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FrameIndex_video_5fanalysis_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFrameIndex_video_5fanalysis_5fmessage_2eproto}, {}};

static void InitDefaultsObject_video_5fanalysis_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ascend::presenter::video_analysis::_Object_default_instance_;
    new (ptr) ::ascend::presenter::video_analysis::Object();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::video_analysis::Object::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Object_video_5fanalysis_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObject_video_5fanalysis_5fmessage_2eproto}, {}};

static void InitDefaultsImageSet_video_5fanalysis_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ascend::presenter::video_analysis::_ImageSet_default_instance_;
    new (ptr) ::ascend::presenter::video_analysis::ImageSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::video_analysis::ImageSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ImageSet_video_5fanalysis_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsImageSet_video_5fanalysis_5fmessage_2eproto}, {
      &scc_info_FrameIndex_video_5fanalysis_5fmessage_2eproto.base,
      &scc_info_Object_video_5fanalysis_5fmessage_2eproto.base,}};

static void InitDefaultsCarInferenceResult_video_5fanalysis_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ascend::presenter::video_analysis::_CarInferenceResult_default_instance_;
    new (ptr) ::ascend::presenter::video_analysis::CarInferenceResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::video_analysis::CarInferenceResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CarInferenceResult_video_5fanalysis_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCarInferenceResult_video_5fanalysis_5fmessage_2eproto}, {
      &scc_info_FrameIndex_video_5fanalysis_5fmessage_2eproto.base,}};

static void InitDefaultsMapType_video_5fanalysis_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ascend::presenter::video_analysis::_MapType_default_instance_;
    new (ptr) ::ascend::presenter::video_analysis::MapType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::video_analysis::MapType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapType_video_5fanalysis_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapType_video_5fanalysis_5fmessage_2eproto}, {}};

static void InitDefaultsHumanInferenceResult_video_5fanalysis_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ascend::presenter::video_analysis::_HumanInferenceResult_default_instance_;
    new (ptr) ::ascend::presenter::video_analysis::HumanInferenceResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::video_analysis::HumanInferenceResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HumanInferenceResult_video_5fanalysis_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHumanInferenceResult_video_5fanalysis_5fmessage_2eproto}, {
      &scc_info_FrameIndex_video_5fanalysis_5fmessage_2eproto.base,
      &scc_info_MapType_video_5fanalysis_5fmessage_2eproto.base,}};

static void InitDefaultsFaceInferenceResult_video_5fanalysis_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ascend::presenter::video_analysis::_FaceInferenceResult_default_instance_;
    new (ptr) ::ascend::presenter::video_analysis::FaceInferenceResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ascend::presenter::video_analysis::FaceInferenceResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FaceInferenceResult_video_5fanalysis_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFaceInferenceResult_video_5fanalysis_5fmessage_2eproto}, {
      &scc_info_FrameIndex_video_5fanalysis_5fmessage_2eproto.base,}};

void InitDefaults_video_5fanalysis_5fmessage_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterApp_video_5fanalysis_5fmessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommonResponse_video_5fanalysis_5fmessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FrameIndex_video_5fanalysis_5fmessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Object_video_5fanalysis_5fmessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImageSet_video_5fanalysis_5fmessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CarInferenceResult_video_5fanalysis_5fmessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapType_video_5fanalysis_5fmessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HumanInferenceResult_video_5fanalysis_5fmessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FaceInferenceResult_video_5fanalysis_5fmessage_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_video_5fanalysis_5fmessage_2eproto[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_video_5fanalysis_5fmessage_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_video_5fanalysis_5fmessage_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_video_5fanalysis_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::RegisterApp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::RegisterApp, id_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::RegisterApp, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::CommonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::CommonResponse, ret_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::CommonResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::FrameIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::FrameIndex, app_id_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::FrameIndex, channel_id_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::FrameIndex, channel_name_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::FrameIndex, frame_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::Object, id_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::Object, confidence_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::Object, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::ImageSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::ImageSet, frame_index_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::ImageSet, frame_image_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::ImageSet, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::CarInferenceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::CarInferenceResult, frame_index_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::CarInferenceResult, object_id_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::CarInferenceResult, type_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::CarInferenceResult, confidence_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::CarInferenceResult, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::MapType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::MapType, key_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::MapType, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::HumanInferenceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::HumanInferenceResult, frame_index_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::HumanInferenceResult, object_id_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::HumanInferenceResult, human_property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::FaceInferenceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::FaceInferenceResult, frame_index_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::FaceInferenceResult, object_id_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::FaceInferenceResult, type_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::FaceInferenceResult, confidence_),
  PROTOBUF_FIELD_OFFSET(::ascend::presenter::video_analysis::FaceInferenceResult, value_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ascend::presenter::video_analysis::RegisterApp)},
  { 7, -1, sizeof(::ascend::presenter::video_analysis::CommonResponse)},
  { 14, -1, sizeof(::ascend::presenter::video_analysis::FrameIndex)},
  { 23, -1, sizeof(::ascend::presenter::video_analysis::Object)},
  { 31, -1, sizeof(::ascend::presenter::video_analysis::ImageSet)},
  { 39, -1, sizeof(::ascend::presenter::video_analysis::CarInferenceResult)},
  { 49, -1, sizeof(::ascend::presenter::video_analysis::MapType)},
  { 56, -1, sizeof(::ascend::presenter::video_analysis::HumanInferenceResult)},
  { 64, -1, sizeof(::ascend::presenter::video_analysis::FaceInferenceResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::video_analysis::_RegisterApp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::video_analysis::_CommonResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::video_analysis::_FrameIndex_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::video_analysis::_Object_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::video_analysis::_ImageSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::video_analysis::_CarInferenceResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::video_analysis::_MapType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::video_analysis::_HumanInferenceResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ascend::presenter::video_analysis::_FaceInferenceResult_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_video_5fanalysis_5fmessage_2eproto = {
  {}, AddDescriptors_video_5fanalysis_5fmessage_2eproto, "video_analysis_message.proto", schemas,
  file_default_instances, TableStruct_video_5fanalysis_5fmessage_2eproto::offsets,
  file_level_metadata_video_5fanalysis_5fmessage_2eproto, 9, file_level_enum_descriptors_video_5fanalysis_5fmessage_2eproto, file_level_service_descriptors_video_5fanalysis_5fmessage_2eproto,
};

const char descriptor_table_protodef_video_5fanalysis_5fmessage_2eproto[] =
  "\n\034video_analysis_message.proto\022\037ascend.p"
  "resenter.video_analysis\"\'\n\013RegisterApp\022\n"
  "\n\002id\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\"Z\n\016CommonRespon"
  "se\0227\n\003ret\030\001 \001(\0162*.ascend.presenter.video"
  "_analysis.ErrorCode\022\017\n\007message\030\002 \001(\t\"X\n\n"
  "FrameIndex\022\016\n\006app_id\030\001 \001(\t\022\022\n\nchannel_id"
  "\030\002 \001(\t\022\024\n\014channel_name\030\003 \001(\t\022\020\n\010frame_id"
  "\030\004 \001(\t\"7\n\006Object\022\n\n\002id\030\001 \001(\t\022\022\n\nconfiden"
  "ce\030\002 \001(\002\022\r\n\005image\030\003 \001(\014\"\232\001\n\010ImageSet\022@\n\013"
  "frame_index\030\001 \001(\0132+.ascend.presenter.vid"
  "eo_analysis.FrameIndex\022\023\n\013frame_image\030\002 "
  "\001(\014\0227\n\006object\030\003 \003(\0132\'.ascend.presenter.v"
  "ideo_analysis.Object\"\315\001\n\022CarInferenceRes"
  "ult\022@\n\013frame_index\030\001 \001(\0132+.ascend.presen"
  "ter.video_analysis.FrameIndex\022\021\n\tobject_"
  "id\030\002 \001(\t\022\?\n\004type\030\003 \001(\01621.ascend.presente"
  "r.video_analysis.CarInferenceType\022\022\n\ncon"
  "fidence\030\004 \001(\002\022\r\n\005value\030\005 \001(\t\"%\n\007MapType\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\002\"\255\001\n\024HumanInf"
  "erenceResult\022@\n\013frame_index\030\001 \001(\0132+.asce"
  "nd.presenter.video_analysis.FrameIndex\022\021"
  "\n\tobject_id\030\002 \001(\t\022@\n\016human_property\030\003 \003("
  "\0132(.ascend.presenter.video_analysis.MapT"
  "ype\"\317\001\n\023FaceInferenceResult\022@\n\013frame_ind"
  "ex\030\001 \001(\0132+.ascend.presenter.video_analys"
  "is.FrameIndex\022\021\n\tobject_id\030\002 \001(\t\022@\n\004type"
  "\030\003 \001(\01622.ascend.presenter.video_analysis"
  ".FaceInferenceType\022\022\n\nconfidence\030\004 \001(\002\022\r"
  "\n\005value\030\005 \001(\t*\337\001\n\tErrorCode\022\016\n\nkErrorNon"
  "e\020\000\022\032\n\026kErrorAppRegisterExist\020\001\022\036\n\032kErro"
  "rAppRegisterNoStorage\020\002\022\031\n\025kErrorAppRegi"
  "sterType\020\003\022\032\n\026kErrorAppRegisterLimit\020\004\022\023"
  "\n\017kErrorAppDelete\020\005\022\021\n\rkErrorAppLost\020\006\022\026"
  "\n\022kErrorStorageLimit\020\007\022\017\n\013kErrorOther\020\010*"
  "\?\n\020CarInferenceType\022\r\n\tkCarColor\020\000\022\r\n\tkC"
  "arBrand\020\001\022\r\n\tkCarPlate\020\002*2\n\021FaceInferenc"
  "eType\022\014\n\010kFaceAge\020\000\022\017\n\013kFaceGender\020\001b\006pr"
  "oto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_video_5fanalysis_5fmessage_2eproto = {
  false, InitDefaults_video_5fanalysis_5fmessage_2eproto, 
  descriptor_table_protodef_video_5fanalysis_5fmessage_2eproto,
  "video_analysis_message.proto", &assign_descriptors_table_video_5fanalysis_5fmessage_2eproto, 1484,
};

void AddDescriptors_video_5fanalysis_5fmessage_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_video_5fanalysis_5fmessage_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_video_5fanalysis_5fmessage_2eproto = []() { AddDescriptors_video_5fanalysis_5fmessage_2eproto(); return true; }();
namespace ascend {
namespace presenter {
namespace video_analysis {
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_video_5fanalysis_5fmessage_2eproto);
  return file_level_enum_descriptors_video_5fanalysis_5fmessage_2eproto[0];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CarInferenceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_video_5fanalysis_5fmessage_2eproto);
  return file_level_enum_descriptors_video_5fanalysis_5fmessage_2eproto[1];
}
bool CarInferenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FaceInferenceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_video_5fanalysis_5fmessage_2eproto);
  return file_level_enum_descriptors_video_5fanalysis_5fmessage_2eproto[2];
}
bool FaceInferenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RegisterApp::InitAsDefaultInstance() {
}
class RegisterApp::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterApp::kIdFieldNumber;
const int RegisterApp::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterApp::RegisterApp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.video_analysis.RegisterApp)
}
RegisterApp::RegisterApp(const RegisterApp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.video_analysis.RegisterApp)
}

void RegisterApp::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegisterApp_video_5fanalysis_5fmessage_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RegisterApp::~RegisterApp() {
  // @@protoc_insertion_point(destructor:ascend.presenter.video_analysis.RegisterApp)
  SharedDtor();
}

void RegisterApp::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegisterApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterApp& RegisterApp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegisterApp_video_5fanalysis_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void RegisterApp::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.video_analysis.RegisterApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterApp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegisterApp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.RegisterApp.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.RegisterApp.type");
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterApp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.video_analysis.RegisterApp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.RegisterApp.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.RegisterApp.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.video_analysis.RegisterApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.video_analysis.RegisterApp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterApp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.video_analysis.RegisterApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.RegisterApp.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.RegisterApp.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.video_analysis.RegisterApp)
}

::google::protobuf::uint8* RegisterApp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.video_analysis.RegisterApp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.RegisterApp.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.RegisterApp.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.video_analysis.RegisterApp)
  return target;
}

size_t RegisterApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.video_analysis.RegisterApp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterApp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.video_analysis.RegisterApp)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterApp* source =
      ::google::protobuf::DynamicCastToGenerated<RegisterApp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.video_analysis.RegisterApp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.video_analysis.RegisterApp)
    MergeFrom(*source);
  }
}

void RegisterApp::MergeFrom(const RegisterApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.video_analysis.RegisterApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void RegisterApp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.video_analysis.RegisterApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterApp::CopyFrom(const RegisterApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.video_analysis.RegisterApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterApp::IsInitialized() const {
  return true;
}

void RegisterApp::Swap(RegisterApp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterApp::InternalSwap(RegisterApp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata RegisterApp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_video_5fanalysis_5fmessage_2eproto);
  return ::file_level_metadata_video_5fanalysis_5fmessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CommonResponse::InitAsDefaultInstance() {
}
class CommonResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonResponse::kRetFieldNumber;
const int CommonResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonResponse::CommonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.video_analysis.CommonResponse)
}
CommonResponse::CommonResponse(const CommonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.video_analysis.CommonResponse)
}

void CommonResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CommonResponse_video_5fanalysis_5fmessage_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
}

CommonResponse::~CommonResponse() {
  // @@protoc_insertion_point(destructor:ascend.presenter.video_analysis.CommonResponse)
  SharedDtor();
}

void CommonResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonResponse& CommonResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CommonResponse_video_5fanalysis_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void CommonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.video_analysis.CommonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommonResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CommonResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ascend.presenter.video_analysis.ErrorCode ret = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_ret(static_cast<::ascend::presenter::video_analysis::ErrorCode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.CommonResponse.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.video_analysis.CommonResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ascend.presenter.video_analysis.ErrorCode ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::ascend::presenter::video_analysis::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.CommonResponse.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.video_analysis.CommonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.video_analysis.CommonResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.video_analysis.CommonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.video_analysis.ErrorCode ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.CommonResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.video_analysis.CommonResponse)
}

::google::protobuf::uint8* CommonResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.video_analysis.CommonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.video_analysis.ErrorCode ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.CommonResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.video_analysis.CommonResponse)
  return target;
}

size_t CommonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.video_analysis.CommonResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // .ascend.presenter.video_analysis.ErrorCode ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.video_analysis.CommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CommonResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.video_analysis.CommonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.video_analysis.CommonResponse)
    MergeFrom(*source);
  }
}

void CommonResponse::MergeFrom(const CommonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.video_analysis.CommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void CommonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.video_analysis.CommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResponse::CopyFrom(const CommonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.video_analysis.CommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResponse::IsInitialized() const {
  return true;
}

void CommonResponse::Swap(CommonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonResponse::InternalSwap(CommonResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_, other->ret_);
}

::google::protobuf::Metadata CommonResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_video_5fanalysis_5fmessage_2eproto);
  return ::file_level_metadata_video_5fanalysis_5fmessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FrameIndex::InitAsDefaultInstance() {
}
class FrameIndex::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameIndex::kAppIdFieldNumber;
const int FrameIndex::kChannelIdFieldNumber;
const int FrameIndex::kChannelNameFieldNumber;
const int FrameIndex::kFrameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameIndex::FrameIndex()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.video_analysis.FrameIndex)
}
FrameIndex::FrameIndex(const FrameIndex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  channel_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_id().size() > 0) {
    channel_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
  }
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.channel_name().size() > 0) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.frame_id().size() > 0) {
    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.video_analysis.FrameIndex)
}

void FrameIndex::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FrameIndex_video_5fanalysis_5fmessage_2eproto.base);
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FrameIndex::~FrameIndex() {
  // @@protoc_insertion_point(destructor:ascend.presenter.video_analysis.FrameIndex)
  SharedDtor();
}

void FrameIndex::SharedDtor() {
  app_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FrameIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameIndex& FrameIndex::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FrameIndex_video_5fanalysis_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void FrameIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.video_analysis.FrameIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FrameIndex::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FrameIndex*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.FrameIndex.app_id");
        object = msg->mutable_app_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string channel_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.FrameIndex.channel_id");
        object = msg->mutable_channel_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string channel_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.FrameIndex.channel_name");
        object = msg->mutable_channel_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string frame_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.FrameIndex.frame_id");
        object = msg->mutable_frame_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FrameIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.video_analysis.FrameIndex)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), static_cast<int>(this->app_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.FrameIndex.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_id().data(), static_cast<int>(this->channel_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.FrameIndex.channel_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string channel_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.FrameIndex.channel_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string frame_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->frame_id().data(), static_cast<int>(this->frame_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.FrameIndex.frame_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.video_analysis.FrameIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.video_analysis.FrameIndex)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FrameIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.video_analysis.FrameIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), static_cast<int>(this->app_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.FrameIndex.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // string channel_id = 2;
  if (this->channel_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_id().data(), static_cast<int>(this->channel_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.FrameIndex.channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_id(), output);
  }

  // string channel_name = 3;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.FrameIndex.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channel_name(), output);
  }

  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.FrameIndex.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->frame_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.video_analysis.FrameIndex)
}

::google::protobuf::uint8* FrameIndex::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.video_analysis.FrameIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), static_cast<int>(this->app_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.FrameIndex.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_id(), target);
  }

  // string channel_id = 2;
  if (this->channel_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_id().data(), static_cast<int>(this->channel_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.FrameIndex.channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_id(), target);
  }

  // string channel_name = 3;
  if (this->channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.FrameIndex.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel_name(), target);
  }

  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.FrameIndex.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->frame_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.video_analysis.FrameIndex)
  return target;
}

size_t FrameIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.video_analysis.FrameIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  // string channel_id = 2;
  if (this->channel_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_id());
  }

  // string channel_name = 3;
  if (this->channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel_name());
  }

  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->frame_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.video_analysis.FrameIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameIndex* source =
      ::google::protobuf::DynamicCastToGenerated<FrameIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.video_analysis.FrameIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.video_analysis.FrameIndex)
    MergeFrom(*source);
  }
}

void FrameIndex::MergeFrom(const FrameIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.video_analysis.FrameIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app_id().size() > 0) {

    app_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id_);
  }
  if (from.channel_id().size() > 0) {

    channel_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
  }
  if (from.channel_name().size() > 0) {

    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  if (from.frame_id().size() > 0) {

    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
}

void FrameIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.video_analysis.FrameIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameIndex::CopyFrom(const FrameIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.video_analysis.FrameIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameIndex::IsInitialized() const {
  return true;
}

void FrameIndex::Swap(FrameIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameIndex::InternalSwap(FrameIndex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_id_.Swap(&other->app_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_id_.Swap(&other->channel_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_name_.Swap(&other->channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  frame_id_.Swap(&other->frame_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata FrameIndex::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_video_5fanalysis_5fmessage_2eproto);
  return ::file_level_metadata_video_5fanalysis_5fmessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Object::InitAsDefaultInstance() {
}
class Object::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kIdFieldNumber;
const int Object::kConfidenceFieldNumber;
const int Object::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.video_analysis.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.video_analysis.Object)
}

void Object::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Object_video_5fanalysis_5fmessage_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:ascend.presenter.video_analysis.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object& Object::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Object_video_5fanalysis_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.video_analysis.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Object::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Object*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.Object.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // float confidence = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_confidence(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // bytes image = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.video_analysis.Object)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.Object.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.video_analysis.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.video_analysis.Object)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.video_analysis.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.Object.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // bytes image = 3;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->image(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.video_analysis.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.video_analysis.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.Object.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // bytes image = 3;
  if (this->image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->image(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.video_analysis.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.video_analysis.Object)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // bytes image = 3;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  // float confidence = 2;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.video_analysis.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::google::protobuf::DynamicCastToGenerated<Object>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.video_analysis.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.video_analysis.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.video_analysis.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.video_analysis.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.video_analysis.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(confidence_, other->confidence_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_video_5fanalysis_5fmessage_2eproto);
  return ::file_level_metadata_video_5fanalysis_5fmessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ImageSet::InitAsDefaultInstance() {
  ::ascend::presenter::video_analysis::_ImageSet_default_instance_._instance.get_mutable()->frame_index_ = const_cast< ::ascend::presenter::video_analysis::FrameIndex*>(
      ::ascend::presenter::video_analysis::FrameIndex::internal_default_instance());
}
class ImageSet::HasBitSetters {
 public:
  static const ::ascend::presenter::video_analysis::FrameIndex& frame_index(const ImageSet* msg);
};

const ::ascend::presenter::video_analysis::FrameIndex&
ImageSet::HasBitSetters::frame_index(const ImageSet* msg) {
  return *msg->frame_index_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageSet::kFrameIndexFieldNumber;
const int ImageSet::kFrameImageFieldNumber;
const int ImageSet::kObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageSet::ImageSet()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.video_analysis.ImageSet)
}
ImageSet::ImageSet(const ImageSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      object_(from.object_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.frame_image().size() > 0) {
    frame_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_image_);
  }
  if (from.has_frame_index()) {
    frame_index_ = new ::ascend::presenter::video_analysis::FrameIndex(*from.frame_index_);
  } else {
    frame_index_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.video_analysis.ImageSet)
}

void ImageSet::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ImageSet_video_5fanalysis_5fmessage_2eproto.base);
  frame_image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_index_ = nullptr;
}

ImageSet::~ImageSet() {
  // @@protoc_insertion_point(destructor:ascend.presenter.video_analysis.ImageSet)
  SharedDtor();
}

void ImageSet::SharedDtor() {
  frame_image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete frame_index_;
}

void ImageSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageSet& ImageSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ImageSet_video_5fanalysis_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void ImageSet::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.video_analysis.ImageSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_.Clear();
  frame_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && frame_index_ != nullptr) {
    delete frame_index_;
  }
  frame_index_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ImageSet::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ImageSet*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ascend::presenter::video_analysis::FrameIndex::_InternalParse;
        object = msg->mutable_frame_index();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes frame_image = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_frame_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .ascend.presenter.video_analysis.Object object = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ascend::presenter::video_analysis::Object::_InternalParse;
          object = msg->add_object();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ImageSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.video_analysis.ImageSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frame_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes frame_image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ascend.presenter.video_analysis.Object object = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.video_analysis.ImageSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.video_analysis.ImageSet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ImageSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.video_analysis.ImageSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  if (this->has_frame_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::frame_index(this), output);
  }

  // bytes frame_image = 2;
  if (this->frame_image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->frame_image(), output);
  }

  // repeated .ascend.presenter.video_analysis.Object object = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->object(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.video_analysis.ImageSet)
}

::google::protobuf::uint8* ImageSet::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.video_analysis.ImageSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  if (this->has_frame_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::frame_index(this), target);
  }

  // bytes frame_image = 2;
  if (this->frame_image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->frame_image(), target);
  }

  // repeated .ascend.presenter.video_analysis.Object object = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->object(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.video_analysis.ImageSet)
  return target;
}

size_t ImageSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.video_analysis.ImageSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ascend.presenter.video_analysis.Object object = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object(static_cast<int>(i)));
    }
  }

  // bytes frame_image = 2;
  if (this->frame_image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->frame_image());
  }

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  if (this->has_frame_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frame_index_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.video_analysis.ImageSet)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageSet* source =
      ::google::protobuf::DynamicCastToGenerated<ImageSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.video_analysis.ImageSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.video_analysis.ImageSet)
    MergeFrom(*source);
  }
}

void ImageSet::MergeFrom(const ImageSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.video_analysis.ImageSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_.MergeFrom(from.object_);
  if (from.frame_image().size() > 0) {

    frame_image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_image_);
  }
  if (from.has_frame_index()) {
    mutable_frame_index()->::ascend::presenter::video_analysis::FrameIndex::MergeFrom(from.frame_index());
  }
}

void ImageSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.video_analysis.ImageSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageSet::CopyFrom(const ImageSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.video_analysis.ImageSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSet::IsInitialized() const {
  return true;
}

void ImageSet::Swap(ImageSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageSet::InternalSwap(ImageSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&object_)->InternalSwap(CastToBase(&other->object_));
  frame_image_.Swap(&other->frame_image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frame_index_, other->frame_index_);
}

::google::protobuf::Metadata ImageSet::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_video_5fanalysis_5fmessage_2eproto);
  return ::file_level_metadata_video_5fanalysis_5fmessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CarInferenceResult::InitAsDefaultInstance() {
  ::ascend::presenter::video_analysis::_CarInferenceResult_default_instance_._instance.get_mutable()->frame_index_ = const_cast< ::ascend::presenter::video_analysis::FrameIndex*>(
      ::ascend::presenter::video_analysis::FrameIndex::internal_default_instance());
}
class CarInferenceResult::HasBitSetters {
 public:
  static const ::ascend::presenter::video_analysis::FrameIndex& frame_index(const CarInferenceResult* msg);
};

const ::ascend::presenter::video_analysis::FrameIndex&
CarInferenceResult::HasBitSetters::frame_index(const CarInferenceResult* msg) {
  return *msg->frame_index_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CarInferenceResult::kFrameIndexFieldNumber;
const int CarInferenceResult::kObjectIdFieldNumber;
const int CarInferenceResult::kTypeFieldNumber;
const int CarInferenceResult::kConfidenceFieldNumber;
const int CarInferenceResult::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CarInferenceResult::CarInferenceResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.video_analysis.CarInferenceResult)
}
CarInferenceResult::CarInferenceResult(const CarInferenceResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_frame_index()) {
    frame_index_ = new ::ascend::presenter::video_analysis::FrameIndex(*from.frame_index_);
  } else {
    frame_index_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&type_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.video_analysis.CarInferenceResult)
}

void CarInferenceResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CarInferenceResult_video_5fanalysis_5fmessage_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&frame_index_)) + sizeof(confidence_));
}

CarInferenceResult::~CarInferenceResult() {
  // @@protoc_insertion_point(destructor:ascend.presenter.video_analysis.CarInferenceResult)
  SharedDtor();
}

void CarInferenceResult::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete frame_index_;
}

void CarInferenceResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CarInferenceResult& CarInferenceResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CarInferenceResult_video_5fanalysis_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void CarInferenceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.video_analysis.CarInferenceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && frame_index_ != nullptr) {
    delete frame_index_;
  }
  frame_index_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&type_)) + sizeof(confidence_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CarInferenceResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CarInferenceResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ascend::presenter::video_analysis::FrameIndex::_InternalParse;
        object = msg->mutable_frame_index();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string object_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.CarInferenceResult.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ascend.presenter.video_analysis.CarInferenceType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::ascend::presenter::video_analysis::CarInferenceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float confidence = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_confidence(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // string value = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.CarInferenceResult.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CarInferenceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.video_analysis.CarInferenceResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frame_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.CarInferenceResult.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ascend.presenter.video_analysis.CarInferenceType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ascend::presenter::video_analysis::CarInferenceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.CarInferenceResult.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.video_analysis.CarInferenceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.video_analysis.CarInferenceResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CarInferenceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.video_analysis.CarInferenceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  if (this->has_frame_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::frame_index(this), output);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.CarInferenceResult.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object_id(), output);
  }

  // .ascend.presenter.video_analysis.CarInferenceType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // float confidence = 4;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->confidence(), output);
  }

  // string value = 5;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.CarInferenceResult.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.video_analysis.CarInferenceResult)
}

::google::protobuf::uint8* CarInferenceResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.video_analysis.CarInferenceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  if (this->has_frame_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::frame_index(this), target);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.CarInferenceResult.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_id(), target);
  }

  // .ascend.presenter.video_analysis.CarInferenceType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // float confidence = 4;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->confidence(), target);
  }

  // string value = 5;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.CarInferenceResult.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.video_analysis.CarInferenceResult)
  return target;
}

size_t CarInferenceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.video_analysis.CarInferenceResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // string value = 5;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  if (this->has_frame_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frame_index_);
  }

  // .ascend.presenter.video_analysis.CarInferenceType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float confidence = 4;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CarInferenceResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.video_analysis.CarInferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CarInferenceResult* source =
      ::google::protobuf::DynamicCastToGenerated<CarInferenceResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.video_analysis.CarInferenceResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.video_analysis.CarInferenceResult)
    MergeFrom(*source);
  }
}

void CarInferenceResult::MergeFrom(const CarInferenceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.video_analysis.CarInferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_frame_index()) {
    mutable_frame_index()->::ascend::presenter::video_analysis::FrameIndex::MergeFrom(from.frame_index());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void CarInferenceResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.video_analysis.CarInferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarInferenceResult::CopyFrom(const CarInferenceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.video_analysis.CarInferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarInferenceResult::IsInitialized() const {
  return true;
}

void CarInferenceResult::Swap(CarInferenceResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CarInferenceResult::InternalSwap(CarInferenceResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frame_index_, other->frame_index_);
  swap(type_, other->type_);
  swap(confidence_, other->confidence_);
}

::google::protobuf::Metadata CarInferenceResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_video_5fanalysis_5fmessage_2eproto);
  return ::file_level_metadata_video_5fanalysis_5fmessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MapType::InitAsDefaultInstance() {
}
class MapType::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapType::kKeyFieldNumber;
const int MapType::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapType::MapType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.video_analysis.MapType)
}
MapType::MapType(const MapType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.video_analysis.MapType)
}

void MapType::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MapType_video_5fanalysis_5fmessage_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

MapType::~MapType() {
  // @@protoc_insertion_point(destructor:ascend.presenter.video_analysis.MapType)
  SharedDtor();
}

void MapType::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MapType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapType& MapType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MapType_video_5fanalysis_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void MapType::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.video_analysis.MapType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MapType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.MapType.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // float value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_value(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.video_analysis.MapType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.MapType.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.video_analysis.MapType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.video_analysis.MapType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.video_analysis.MapType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.MapType.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.video_analysis.MapType)
}

::google::protobuf::uint8* MapType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.video_analysis.MapType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.MapType.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.video_analysis.MapType)
  return target;
}

size_t MapType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.video_analysis.MapType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.video_analysis.MapType)
  GOOGLE_DCHECK_NE(&from, this);
  const MapType* source =
      ::google::protobuf::DynamicCastToGenerated<MapType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.video_analysis.MapType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.video_analysis.MapType)
    MergeFrom(*source);
  }
}

void MapType::MergeFrom(const MapType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.video_analysis.MapType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void MapType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.video_analysis.MapType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapType::CopyFrom(const MapType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.video_analysis.MapType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapType::IsInitialized() const {
  return true;
}

void MapType::Swap(MapType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapType::InternalSwap(MapType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::google::protobuf::Metadata MapType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_video_5fanalysis_5fmessage_2eproto);
  return ::file_level_metadata_video_5fanalysis_5fmessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HumanInferenceResult::InitAsDefaultInstance() {
  ::ascend::presenter::video_analysis::_HumanInferenceResult_default_instance_._instance.get_mutable()->frame_index_ = const_cast< ::ascend::presenter::video_analysis::FrameIndex*>(
      ::ascend::presenter::video_analysis::FrameIndex::internal_default_instance());
}
class HumanInferenceResult::HasBitSetters {
 public:
  static const ::ascend::presenter::video_analysis::FrameIndex& frame_index(const HumanInferenceResult* msg);
};

const ::ascend::presenter::video_analysis::FrameIndex&
HumanInferenceResult::HasBitSetters::frame_index(const HumanInferenceResult* msg) {
  return *msg->frame_index_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HumanInferenceResult::kFrameIndexFieldNumber;
const int HumanInferenceResult::kObjectIdFieldNumber;
const int HumanInferenceResult::kHumanPropertyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HumanInferenceResult::HumanInferenceResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.video_analysis.HumanInferenceResult)
}
HumanInferenceResult::HumanInferenceResult(const HumanInferenceResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      human_property_(from.human_property_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.has_frame_index()) {
    frame_index_ = new ::ascend::presenter::video_analysis::FrameIndex(*from.frame_index_);
  } else {
    frame_index_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.video_analysis.HumanInferenceResult)
}

void HumanInferenceResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HumanInferenceResult_video_5fanalysis_5fmessage_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_index_ = nullptr;
}

HumanInferenceResult::~HumanInferenceResult() {
  // @@protoc_insertion_point(destructor:ascend.presenter.video_analysis.HumanInferenceResult)
  SharedDtor();
}

void HumanInferenceResult::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete frame_index_;
}

void HumanInferenceResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HumanInferenceResult& HumanInferenceResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HumanInferenceResult_video_5fanalysis_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void HumanInferenceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.video_analysis.HumanInferenceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  human_property_.Clear();
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && frame_index_ != nullptr) {
    delete frame_index_;
  }
  frame_index_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HumanInferenceResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HumanInferenceResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ascend::presenter::video_analysis::FrameIndex::_InternalParse;
        object = msg->mutable_frame_index();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string object_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.HumanInferenceResult.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .ascend.presenter.video_analysis.MapType human_property = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ascend::presenter::video_analysis::MapType::_InternalParse;
          object = msg->add_human_property();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HumanInferenceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.video_analysis.HumanInferenceResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frame_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.HumanInferenceResult.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ascend.presenter.video_analysis.MapType human_property = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_human_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.video_analysis.HumanInferenceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.video_analysis.HumanInferenceResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HumanInferenceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.video_analysis.HumanInferenceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  if (this->has_frame_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::frame_index(this), output);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.HumanInferenceResult.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object_id(), output);
  }

  // repeated .ascend.presenter.video_analysis.MapType human_property = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->human_property_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->human_property(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.video_analysis.HumanInferenceResult)
}

::google::protobuf::uint8* HumanInferenceResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.video_analysis.HumanInferenceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  if (this->has_frame_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::frame_index(this), target);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.HumanInferenceResult.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_id(), target);
  }

  // repeated .ascend.presenter.video_analysis.MapType human_property = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->human_property_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->human_property(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.video_analysis.HumanInferenceResult)
  return target;
}

size_t HumanInferenceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.video_analysis.HumanInferenceResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ascend.presenter.video_analysis.MapType human_property = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->human_property_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->human_property(static_cast<int>(i)));
    }
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  if (this->has_frame_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frame_index_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HumanInferenceResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.video_analysis.HumanInferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  const HumanInferenceResult* source =
      ::google::protobuf::DynamicCastToGenerated<HumanInferenceResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.video_analysis.HumanInferenceResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.video_analysis.HumanInferenceResult)
    MergeFrom(*source);
  }
}

void HumanInferenceResult::MergeFrom(const HumanInferenceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.video_analysis.HumanInferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  human_property_.MergeFrom(from.human_property_);
  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.has_frame_index()) {
    mutable_frame_index()->::ascend::presenter::video_analysis::FrameIndex::MergeFrom(from.frame_index());
  }
}

void HumanInferenceResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.video_analysis.HumanInferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanInferenceResult::CopyFrom(const HumanInferenceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.video_analysis.HumanInferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanInferenceResult::IsInitialized() const {
  return true;
}

void HumanInferenceResult::Swap(HumanInferenceResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HumanInferenceResult::InternalSwap(HumanInferenceResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&human_property_)->InternalSwap(CastToBase(&other->human_property_));
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frame_index_, other->frame_index_);
}

::google::protobuf::Metadata HumanInferenceResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_video_5fanalysis_5fmessage_2eproto);
  return ::file_level_metadata_video_5fanalysis_5fmessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FaceInferenceResult::InitAsDefaultInstance() {
  ::ascend::presenter::video_analysis::_FaceInferenceResult_default_instance_._instance.get_mutable()->frame_index_ = const_cast< ::ascend::presenter::video_analysis::FrameIndex*>(
      ::ascend::presenter::video_analysis::FrameIndex::internal_default_instance());
}
class FaceInferenceResult::HasBitSetters {
 public:
  static const ::ascend::presenter::video_analysis::FrameIndex& frame_index(const FaceInferenceResult* msg);
};

const ::ascend::presenter::video_analysis::FrameIndex&
FaceInferenceResult::HasBitSetters::frame_index(const FaceInferenceResult* msg) {
  return *msg->frame_index_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaceInferenceResult::kFrameIndexFieldNumber;
const int FaceInferenceResult::kObjectIdFieldNumber;
const int FaceInferenceResult::kTypeFieldNumber;
const int FaceInferenceResult::kConfidenceFieldNumber;
const int FaceInferenceResult::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaceInferenceResult::FaceInferenceResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ascend.presenter.video_analysis.FaceInferenceResult)
}
FaceInferenceResult::FaceInferenceResult(const FaceInferenceResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_id().size() > 0) {
    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_frame_index()) {
    frame_index_ = new ::ascend::presenter::video_analysis::FrameIndex(*from.frame_index_);
  } else {
    frame_index_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&type_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:ascend.presenter.video_analysis.FaceInferenceResult)
}

void FaceInferenceResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FaceInferenceResult_video_5fanalysis_5fmessage_2eproto.base);
  object_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&frame_index_)) + sizeof(confidence_));
}

FaceInferenceResult::~FaceInferenceResult() {
  // @@protoc_insertion_point(destructor:ascend.presenter.video_analysis.FaceInferenceResult)
  SharedDtor();
}

void FaceInferenceResult::SharedDtor() {
  object_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete frame_index_;
}

void FaceInferenceResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceInferenceResult& FaceInferenceResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FaceInferenceResult_video_5fanalysis_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void FaceInferenceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ascend.presenter.video_analysis.FaceInferenceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && frame_index_ != nullptr) {
    delete frame_index_;
  }
  frame_index_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&type_)) + sizeof(confidence_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FaceInferenceResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FaceInferenceResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ascend::presenter::video_analysis::FrameIndex::_InternalParse;
        object = msg->mutable_frame_index();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string object_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.FaceInferenceResult.object_id");
        object = msg->mutable_object_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .ascend.presenter.video_analysis.FaceInferenceType type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::ascend::presenter::video_analysis::FaceInferenceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float confidence = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_confidence(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // string value = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ascend.presenter.video_analysis.FaceInferenceResult.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FaceInferenceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ascend.presenter.video_analysis.FaceInferenceResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frame_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_id().data(), static_cast<int>(this->object_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.FaceInferenceResult.object_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ascend.presenter.video_analysis.FaceInferenceType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ascend::presenter::video_analysis::FaceInferenceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ascend.presenter.video_analysis.FaceInferenceResult.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ascend.presenter.video_analysis.FaceInferenceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ascend.presenter.video_analysis.FaceInferenceResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FaceInferenceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ascend.presenter.video_analysis.FaceInferenceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  if (this->has_frame_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::frame_index(this), output);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.FaceInferenceResult.object_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object_id(), output);
  }

  // .ascend.presenter.video_analysis.FaceInferenceType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // float confidence = 4;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->confidence(), output);
  }

  // string value = 5;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.FaceInferenceResult.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ascend.presenter.video_analysis.FaceInferenceResult)
}

::google::protobuf::uint8* FaceInferenceResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ascend.presenter.video_analysis.FaceInferenceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  if (this->has_frame_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::frame_index(this), target);
  }

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_id().data(), static_cast<int>(this->object_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.FaceInferenceResult.object_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_id(), target);
  }

  // .ascend.presenter.video_analysis.FaceInferenceType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // float confidence = 4;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->confidence(), target);
  }

  // string value = 5;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ascend.presenter.video_analysis.FaceInferenceResult.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ascend.presenter.video_analysis.FaceInferenceResult)
  return target;
}

size_t FaceInferenceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ascend.presenter.video_analysis.FaceInferenceResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_id = 2;
  if (this->object_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_id());
  }

  // string value = 5;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  if (this->has_frame_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *frame_index_);
  }

  // .ascend.presenter.video_analysis.FaceInferenceType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float confidence = 4;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceInferenceResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ascend.presenter.video_analysis.FaceInferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceInferenceResult* source =
      ::google::protobuf::DynamicCastToGenerated<FaceInferenceResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ascend.presenter.video_analysis.FaceInferenceResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ascend.presenter.video_analysis.FaceInferenceResult)
    MergeFrom(*source);
  }
}

void FaceInferenceResult::MergeFrom(const FaceInferenceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ascend.presenter.video_analysis.FaceInferenceResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_id().size() > 0) {

    object_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_id_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_frame_index()) {
    mutable_frame_index()->::ascend::presenter::video_analysis::FrameIndex::MergeFrom(from.frame_index());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void FaceInferenceResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ascend.presenter.video_analysis.FaceInferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceInferenceResult::CopyFrom(const FaceInferenceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ascend.presenter.video_analysis.FaceInferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceInferenceResult::IsInitialized() const {
  return true;
}

void FaceInferenceResult::Swap(FaceInferenceResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaceInferenceResult::InternalSwap(FaceInferenceResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_id_.Swap(&other->object_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frame_index_, other->frame_index_);
  swap(type_, other->type_);
  swap(confidence_, other->confidence_);
}

::google::protobuf::Metadata FaceInferenceResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_video_5fanalysis_5fmessage_2eproto);
  return ::file_level_metadata_video_5fanalysis_5fmessage_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace video_analysis
}  // namespace presenter
}  // namespace ascend
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ascend::presenter::video_analysis::RegisterApp* Arena::CreateMaybeMessage< ::ascend::presenter::video_analysis::RegisterApp >(Arena* arena) {
  return Arena::CreateInternal< ::ascend::presenter::video_analysis::RegisterApp >(arena);
}
template<> PROTOBUF_NOINLINE ::ascend::presenter::video_analysis::CommonResponse* Arena::CreateMaybeMessage< ::ascend::presenter::video_analysis::CommonResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ascend::presenter::video_analysis::CommonResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ascend::presenter::video_analysis::FrameIndex* Arena::CreateMaybeMessage< ::ascend::presenter::video_analysis::FrameIndex >(Arena* arena) {
  return Arena::CreateInternal< ::ascend::presenter::video_analysis::FrameIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::ascend::presenter::video_analysis::Object* Arena::CreateMaybeMessage< ::ascend::presenter::video_analysis::Object >(Arena* arena) {
  return Arena::CreateInternal< ::ascend::presenter::video_analysis::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::ascend::presenter::video_analysis::ImageSet* Arena::CreateMaybeMessage< ::ascend::presenter::video_analysis::ImageSet >(Arena* arena) {
  return Arena::CreateInternal< ::ascend::presenter::video_analysis::ImageSet >(arena);
}
template<> PROTOBUF_NOINLINE ::ascend::presenter::video_analysis::CarInferenceResult* Arena::CreateMaybeMessage< ::ascend::presenter::video_analysis::CarInferenceResult >(Arena* arena) {
  return Arena::CreateInternal< ::ascend::presenter::video_analysis::CarInferenceResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ascend::presenter::video_analysis::MapType* Arena::CreateMaybeMessage< ::ascend::presenter::video_analysis::MapType >(Arena* arena) {
  return Arena::CreateInternal< ::ascend::presenter::video_analysis::MapType >(arena);
}
template<> PROTOBUF_NOINLINE ::ascend::presenter::video_analysis::HumanInferenceResult* Arena::CreateMaybeMessage< ::ascend::presenter::video_analysis::HumanInferenceResult >(Arena* arena) {
  return Arena::CreateInternal< ::ascend::presenter::video_analysis::HumanInferenceResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ascend::presenter::video_analysis::FaceInferenceResult* Arena::CreateMaybeMessage< ::ascend::presenter::video_analysis::FaceInferenceResult >(Arena* arena) {
  return Arena::CreateInternal< ::ascend::presenter::video_analysis::FaceInferenceResult >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
